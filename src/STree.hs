-- module STree where
--
-- import qualified AST
-- import Control.Monad.ST
-- import qualified Data.Map.Strict as Map
-- import Data.STRef
-- import qualified Path
--
-- -- Some rules:
-- -- 1. If a node is a Func that contains references, then the node should not be supplanted to other places without
-- -- changing the dependencies.
-- -- 2. Evaluation is top-down. Evaluation do not go deeper unless necessary.
-- data STree s = STree
--   { stNode :: STreeNode
--   , stOrig :: Maybe STree
--   -- ^ stOrig is the original tree that is used to evaluate the current tree.
--   , stEvaled :: Bool
--   }
--
-- -- | STreeNode represents a tree structure that contains values.
-- data STreeNode s
--   = -- | TNStruct is a struct that contains a value and a map of selectors to Tree.
--     STNStruct (STStruct s)

-- \| STNList STList
-- \| STNDisj STDisj
-- \| STNConstraint STConstraint
-- \| STNRefCycle STRefCycle
-- \| STNFunc Func
-- \| STNAtom AtomV
-- \| STNBounds Bounds
-- \| STNTop
-- \| STNBottom Bottom
